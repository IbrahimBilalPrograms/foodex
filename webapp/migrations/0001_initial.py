# Generated by Django 2.0.8 on 2019-10-26 11:38

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=150, verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', unique=True, blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_customer', models.BooleanField(default=False, verbose_name='customer status')),
                ('is_restaurant_owner', models.BooleanField(default=False, verbose_name='restaurant owner status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cuisine',
            fields=[
                ('cuisine_id', models.AutoField(primary_key=True, serialize=False)),
                ('cuisine_name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_name', models.CharField(max_length=20)),
                ('l_name', models.CharField(max_length=20)),
                ('phone', models.CharField(max_length=10)),
                ('addressline1', models.TextField(max_length=20)),
                ('addressline2', models.TextField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Favourite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('food_item_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('is_veg', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodRestaurant',
            fields=[
                ('food_item_id', models.AutoField(primary_key=True, serialize=False)),
                ('cost', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='ItemType',
            fields=[
                ('type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('LocationId', models.AutoField(primary_key=True, serialize=False)),
                ('LocationName', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('offer_id', models.AutoField(primary_key=True, serialize=False)),
                ('discount', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.AutoField(primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('instructions', models.TextField(blank=True)),
                ('payment_mode_online', models.BooleanField(default=True)),
                ('tax', models.IntegerField()),
                ('rating', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('review', models.TextField(max_length=250)),
                ('status', models.CharField(choices=[('Waiting', 'Waiting'), ('Placed', 'Placed'), ('Acknowledged', 'Acknowledged'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled'), ('Dispatched', 'Dispatched')], default='Waiting', max_length=50)),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='webapp.Offer')),
            ],
        ),
        migrations.CreateModel(
            name='OrderDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.FoodItem')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.Order')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('hash', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.IntegerField()),
                ('datetime', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('restaurant_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('address', models.CharField(max_length=50)),
                ('avg_time', models.CharField(max_length=4)),
                ('avg_cost', models.CharField(max_length=5)),
                ('is_exclusive', models.BooleanField(default=False)),
                ('phone', models.CharField(max_length=10)),
                ('r_logo', models.FileField(upload_to='')),
                ('cuisine', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='webapp.Cuisine')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='webapp.Location')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='webapp.Offer')),
            ],
        ),
        migrations.CreateModel(
            name='RestaurantOwner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_name', models.CharField(max_length=20)),
                ('l_name', models.CharField(max_length=20)),
                ('phone', models.CharField(max_length=10)),
                ('addressline1', models.TextField(max_length=20)),
                ('addressline2', models.TextField(max_length=20)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='webapp.Location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='restaurant',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.RestaurantOwner'),
        ),
        migrations.AddField(
            model_name='order',
            name='payment_hash',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='webapp.Payment'),
        ),
        migrations.AddField(
            model_name='order',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='webapp.Restaurant'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='webapp.Customer'),
        ),
        migrations.AddField(
            model_name='foodrestaurant',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.Restaurant'),
        ),
        migrations.AddField(
            model_name='fooditem',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='webapp.ItemType'),
        ),
        migrations.AddField(
            model_name='favourite',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.Restaurant'),
        ),
        migrations.AddField(
            model_name='favourite',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.Customer'),
        ),
        migrations.AddField(
            model_name='customer',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='webapp.Location'),
        ),
        migrations.AddField(
            model_name='customer',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='orderdetail',
            unique_together={('food_item', 'order')},
        ),
    ]
